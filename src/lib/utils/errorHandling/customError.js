export default class AppError extends Error {
  constructor(message = "Une erreur est survenue") {
    super(message);
    this.name = "AppError"; 
  }
}

// Oui, c'est une exception au comportement normal des classes : Error ajoute automatiquement stack Ã  l'instance sans qu'on ait besoin de le passer explicitement Ã  super(). ğŸš€

// ğŸ“Œ Pourquoi ?

// Error est une classe spÃ©ciale native en JavaScript.
// DÃ¨s que son constructeur est appelÃ© via super(), le moteur JS capture la stack trace et l'attache Ã  l'instance.
// Dans V8 (Chrome, Node.js), c'est fait via Error.captureStackTrace(this), ce qui ne nÃ©cessite pas de passer stack en argument.
// ğŸ”¥ Donc oui, c'est un cas particulier, et stack est gÃ©nÃ©rÃ© automatiquement grÃ¢ce au moteur JS ! ğŸš€



/*
on hÃ©rite de la classe native Error
on est obligÃ© de prendre message pour ajouter la prop aux objets crÃ©Ã©s et que le stack soit bien rempli
le stack est automatiquement rajoutÃ© avec cette classe native, il dÃ©crit la trace d'execution au moment oÃ¹ l'erreur a Ã©tÃ© levÃ©, ce qui aconduit a cette erreur
this.name peut Ãªtre utile dans certains cas,le stack peut le lire dynamique, pas 
*/