import { Post } from "@/lib/models/post";
import { connectToDB } from "../../utils/db/connectToDB";
import { sessionInfo } from "../session/sessionMethods";
import { unstable_cache } from "next/cache";
import { Tag } from "@/lib/models/tag";
import mongoose from "mongoose";
import { User } from "@/lib/models/user";

import { notFound } from "next/navigation";

/*
Pour r√©sumer, deux caches possibles : 
- le retour d'une m√©thode serveur 
- le cache d'une page statique

Une page statique est cach√©e et redistribu√©e √† chaque call.
On peut la reconstruire gr√¢ce √† revalidatePath(maPage), qui reconstruit la page ou revalidateTag.
Pour la reconstruire avec revalidateTag, il faut la "lier" √† une m√©thode qu'elle utilise;
C'est √† dire qu'il faut entourer une m√©thode serveur qu'elle utilise d'un unstable cache avec un argument tag.
Cela permettra de reconstruire la page ET le retour de la m√©thode cach√©e au revalidateTag.
Le tag peut √™tre attach√© √† toutes les pages qui utilisent la m√©thode cach√©e, et donc toute revalider d'un coup.

Une page statique quant √† elle, va toujours √™tre cr√©√© √† chaque requ√™tE.
Mais on peut quand m√™me cacher le r√©sultat d'une fonction qu'elle utilise.
Le mieux est donc de cr√©er un tag unique par retour de fonction, via l'argument de la m√©thode.
Puis on peut revalider ce tag quand on modifie un article par exemple.

*/

export async function getPosts() {
  await connectToDB();
  const posts = await Post.find({})
    .populate("author", "userName normalizedUserName") // Peupler `author` avec seulement `userName`
    .select("title coverImageUrl slug createdAt updatedAt"); // S√©lectionner les champs n√©cessaires

  return posts;
}

// export const getPosts = unstable_cache(
//   async () => {
//     await connectToDB();
//     const posts = await Post.find({})
//       .populate("author", "userName normalizedUserName") // Peupler `author` avec seulement `userName`
//       .select("title coverImageUrl slug createdAt updatedAt"); // S√©lectionner les champs n√©cessaires

//     return posts;
//   },
//   // [], // Pas besoin de cl√© de cache suppl√©mentaire, pas d'argument dynamique 
//   // { tags: ["posts"], revalidate: 60 } // Tag pour invalidation et cache pendant 60s
//   { tags: ["posts"] }
// );

// üìå Pourquoi c‚Äôest important ?
// 1Ô∏è‚É£ Si tu utilises seulement keyParts ([userId])

// ‚úÖ Chaque utilisateur a son propre cache.
// ‚ùå Mais tu ne peux pas supprimer un cache pr√©cis facilement.
// ‚ùå Il faut attendre l‚Äôexpiration du cache (revalidate) ou utiliser unstable_noStore().
// 2Ô∏è‚É£ Si tu utilises tags sans keyParts

// ‚úÖ Tu peux invalider un groupe de caches avec revalidateTag().
// ‚ùå Mais tous les utilisateurs partageraient le m√™me cache, ce qui est un probl√®me si chaque user doit avoir ses propres donn√©es en cache.
// 3Ô∏è‚É£ Si tu combines les deux (keyParts + tags)

// ‚úÖ Chaque utilisateur a son propre cache (keyParts).
// ‚úÖ Tu peux r√©initialiser des caches cibl√©s (tags).






export async function getPost(slug) {
  await connectToDB();
  const post = await Post.findOne({ slug })
    .populate({
      path: "author", // Enrichit l'objet `author`
      select: "userName normalizedUserName", // Inclut les champs n√©cessaires depuis User
    })
    .populate({
      path: "tags",
      select: "name slug", // Inclut le champ `name` depuis Tag
    })
  if (!post) return notFound();
  return post
}

// export const getPost = unstable_cache(
//   async (slug) => {
//     console.log("DANS GET POST L√†")
//     await connectToDB();
//     const post = await Post.findOne({ slug })
//       .populate({ path: "author", select: "userName normalizedUserName" })
//       .populate({ path: "tags", select: "name slug" });

//     if (!post) return notFound();
//     return post;
//   }
// );










export async function getUserPostsFromSessionID(userId) {

  // On passe userId √† la m√©thode car on ne peut pas lire les cookies directement dans une m√©thode cach√©e car c'est du dynamique les cookies
  // Connexion √† la base de donn√©es
  await connectToDB();


  // Rechercher les articles cr√©√©s par cet utilisateur
  const posts = await Post.find({ author: userId }).select("title _id slug").lean();
  // Lean retourne simlpement des objets moins charg√©s de m√©thodes mongoose
  // console.log("posts",posts);
  // console.log(posts[0] instanceof mongoose.Model);
  return posts;
}



export async function getPostsByAuthor(normalizedUserName) {
  await connectToDB();

  // √âtape 1 : Trouver l'auteur correspondant au `normalizedUserName`
  // Retourne un objet avec l'objectId de base, + ce qu'on select userName pour le passer √† l'objet final et l'afficher sur la page, et normalizedUserName
  const author = await User.findOne({ normalizedUserName }).select("userName");
  if (!author) {
    notFound()
  }

  // √âtape 2 : Trouver les articles pour cet auteur

  const posts = await Post.find({ author: author._id })
    .populate({
      path: "author",
      select: "userName normalizedUserName", // Enrichir les informations sur l'auteur
    })
    .select("title coverImageUrl slug createdAt updatedAt")
    .sort({ createdAt: -1 });


  // Retourner l'objet contenant l'auteur et ses articles
  return { author, posts }; // Attention contrairement au tag on ajout l'auteur pour avoir son nom bien √©crit, pas normaliz√©
}

export async function getPostsByTag(tagSlug) {
  // on try connectToDB et les autres m√©thodes, mais on utilise des let pour les remplir et v√©rifier leur pr√©sence pour par la suite redirect, ou pas.
  await connectToDB();

  const tag = await Tag.findOne({ slug: tagSlug });
  if (!tag) {
    notFound() // Redirection directe vers la page 404 // Une redirection depuis le serveur fonctionne en envoyant une r√©ponse HTTP au client avec un code de statut 3xx (g√©n√©ralement 301 ou 302) et un en-t√™te Location qui indique l'URL cible de la redirection.
  }

  const posts = await Post.find({ tags: tag._id })
    // Quand on lie deux documents de mod√®les diff√©rents via un ID (ObjectId), on appelle √ßa une relation par r√©f√©rence (Reference Relationship).
    // populate() ‚Üí R√©cup√®re les donn√©es li√©es d'une autre collection via une r√©f√©rence (ObjectId) (ex: r√©cup√©rer l'auteur d‚Äôun post).
    // aggregate() ‚Üí Permet des requ√™tes avanc√©es avec jointures ($lookup), filtres ($match), tris ($sort), et comptages ($count).
    .populate({
      path: "author",
      select: "userName", // R√©cup√®re uniquement userName pour l'auteur
    })
    // S√©lectionne les champs souhait√©s de Post
    .select("title coverImageUrl slug createdAt updatedAt author ")  // S√©lectionne les champs n√©cessaires
    .sort({ createdAt: -1 })
    .lean()

  return posts;
}

