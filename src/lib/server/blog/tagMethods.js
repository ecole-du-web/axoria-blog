import { connectToDB } from "@/lib/utils/db/connectToDB";
import { Tag } from "@/lib/models/tag";


// Une agr√©gation en MongoDB est une mani√®re avanc√©e de transformer et d‚Äôanalyser les donn√©es en appliquant une s√©rie d‚Äô√©tapes (pipeline) sur une collection, comme des filtres, jointures, tris, calculs et regroupements, avant de renvoyer le r√©sultat final. üöÄ

//  une jointure en MongoDB est un ensemble de donn√©es fusionn√©es provenant de plusieurs collections, g√©n√©ralement sous forme d'un tableau d'objets (ou d'un objet enrichi).
// Fonction pour r√©cup√©rer les tags
export async function getTags() {

    // Connexion √† la base de donn√©es MongoDB
    await connectToDB();

    // Ex√©cution d'une agr√©gation sur la collection "Tag"
    // "La m√©thode aggregate() de Mongoose permet de retourner un tableau d'objets repr√©sentant des documents d'un mod√®le, enrichis avec des donn√©es d'un autre mod√®le via une jointure ($lookup) bas√©e sur un champ commun, comme _id." ‚úÖ
    const tags = await Tag.aggregate([
      // Une jointure en MongoDB ($lookup) permet de combiner des documents de deux collections diff√©rentes en fonction d'un champ commun
      // 1Ô∏è‚É£ Jointure entre "tags" et "posts"
      {
        $lookup: {
          from: "posts",           // Collection avec laquelle on fait la jointure (posts)
          foreignField: "tags",    // Champ dans "posts" qui contient les r√©f√©rences aux tags
          localField: "_id",       // Champ de "tags" utilis√© pour la jointure (l'ID du tag)
          as: "postsWithTag",      // Nom du tableau contenant les posts associ√©s √† chaque tag
        },
      },

      // 2Ô∏è‚É£ Ajout d'un champ `postCount` pour compter le nombre d'articles li√©s √† chaque tag
      {
        $addFields: { 
          postCount: { $size: "$postsWithTag" } // `$size` compte les √©l√©ments du tableau "postsWithTag"
        },
      },

      // 3Ô∏è‚É£ Filtre pour ne garder que les tags qui ont au moins 1 article associ√©
      {
        $match: { postCount: { $gt: 0 } }, // `$gt: 0` signifie "strictement sup√©rieur √† 0"
      },

      // 4Ô∏è‚É£ Trie les tags par nombre d'articles associ√©s (du plus grand au plus petit)
      {
        $sort: { postCount: -1 }, // `-1` = ordre d√©croissant (du plus grand au plus petit)
      },

      // 5Ô∏è‚É£ Supprime le champ "postsWithTag" pour ne pas envoyer les articles dans la r√©ponse
      {
        $project: { postsWithTag: 0 }, // `0` = ne pas inclure ce champ dans le r√©sultat final
      },
    ])

    // Retourne la liste des tags trait√©s
    return tags;

}




